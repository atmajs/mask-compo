UTest({
	'simple object inheritance': function(){
		var A = {
			a: 'a',
			getA: function(){ return this.a; },
			get: function(){ return this.a; },
			attr: {
				xA: 'a'
			}
		};
		var Ctor = Compo(A, {
			b: 'b',
			get: function(){
				return this.b + this.super();
			},
			attr: {
				xB: 'b'
			}
		});
		
		var x = new Ctor;
		has_(x, {
			a: 'a',
			b: 'b'
		});
		
		has_(x.attr, {
			xA: 'a',
			xB: 'b'
		});
		
		is_(x.getA, 'Function');
		is_(x.get, 'Function');
		eq_(x.get(), 'ba');
	},
	'deep function inheritance': function(){
		var A = {
			name: 'a',
			get: function(){
				return 'a';
			}
		};
		var B = {
			name: 'b',
			get: function(){
				return 'b' + this.super();
			}
		};
		var C = {
			name: 'c',
			get: function(){
				return 'c' + this.super();
			}
		};
		
		var foo = new (Compo(A, B, C, {
			get: function(){
				return 'd' + this.super();
			}
		}));
		
		eq_(foo.name, 'c');
		eq_(foo.get(), 'dcba');
	},
	'should inherit component attributes and methods': function(){
		var A = Compo({
			foo: function(){
				return 'foo'
			},
			attr: {
				a: '~[name]'
			}
		});
		var B = Compo(A, {
			foo: function(){
				return 'foo' + this.super()
			},
			attr: {
				b: '~[name]'
			}
		});
		
		var b = new B;
		
		is_(b.foo, 'Function');
		eq_(b.foo(), 'foofoo');
		is_(b.attr.b, 'Function');
		is_(b.attr.a, 'Function');
	},
	'should inherit component constructors': function(){
		var A = Compo({
			name: '_',
			constructor: function(x){
				this.name += x + 'A';
			}
		});
		var B = function(x){
			this.name += x + 'B';
		};
		var C = Compo(A, B, {
			constructor: function(x){
				this.name += x + 'C';
			}
		});
		
		var c = new C('-');
		eq_(c.name, '_-A-B-C');
	},
	'should inherit template via merging': function(){
		var A = Compo({
			template: 'section > span > @body'
		});
		var B = Compo(A, {
			template: '@body > em > "B"'
		});
		mask.registerHandler('b', B);
		
		var dom = mask.render('b').firstChild;
		$(dom)
			.eq_('prop', 'tagName', 'SECTION')
			.find('span > em')
			.eq_('length', 1)
			.eq_('html', 'B');
	},
	
	'should join template and nodes': function(){
		mask.registerHandler('foo', Compo({
			template: 'section > @body;'
		}))
		mask.registerHandler('bar', Compo('foo', {
			nodes: mask.parse('@body > em > "Hello"')
		}));
		
		var dom = mask.render('bar').firstChild;
		
		eq_(dom.tagName, 'SECTION');
		eq_(dom.innerHTML, '<em>Hello</em>');
	},
	
	'should call the onRenderStart/onRenderEnd functions': function(){
		mask.registerHandler('foo', Compo({
			onRenderStart: function(){
				this.start = [1];
			},
			onRenderEnd: function(){
				this.end = [1];
			},
		}))
		mask.registerHandler('bar', Compo('foo', {
			onRenderStart: function(){
				this.start.push(2);
			},
			onRenderEnd: function(){
				this.end.push(2);
			}
		}));
		var compo = Compo.initialize('bar');
		deepEq_(compo.start, [1, 2])
		deepEq_(compo.end,   [1, 2])
	},
	'should call SLOT functions': function(){
		mask.registerHandler('foo', Compo({
			slots: {
				test: function(){
					this.slots = [1];
				}
			}
		}))
		mask.registerHandler('bar', Compo('foo', {
			slots: {
				test: function(){
					this.slots.push(2);
				}
			}
		}));
		var compo = Compo.initialize('bar');
		compo.emitIn('test');
		deepEq_(compo.slots, [1, 2]);
	},
	'should call PIPE functions': function(){
		mask.registerHandler('foo', Compo({
			pipes: {
				app:{
					test: function(){
						this.test = [1];
					}
				}
			}
		}))
		mask.registerHandler('bar', Compo('foo', {
			pipes: {
				app:{
					test: function(){
						this.test.push(2)
					}
				}
			}
		}));
		var compo = Compo.initialize('bar');
		Compo.pipe('app').emit('test');
		deepEq_(compo.test, [1, 2]);
	}
})