UTest({
	'simple object inheritance': function(){
		var A = {
			a: 'a',
			getA: function(){ return this.a; },
			get: function(){ return this.a; },
			attr: {
				xA: 'a'
			}
		};
		var Ctor = Compo(A, {
			b: 'b',
			get: function(){
				return this.b + this.super();
			},
			attr: {
				xB: 'b'
			}
		});
		
		var x = new Ctor;
		has_(x, {
			a: 'a',
			b: 'b'
		});
		
		has_(x.attr, {
			xA: 'a',
			xB: 'b'
		});
		
		is_(x.getA, 'Function');
		is_(x.get, 'Function');
		eq_(x.get(), 'ba');
	},
	'deep function inheritance': function(){
		var A = {
			name: 'a',
			get: function(){
				return 'a';
			},
			slots: {
				get: function(){
					return 'a'
				},
				'foo': 'get'
			}
		};
		var B = {
			name: 'b',
			get: function(){
				return 'b' + this.super();
			},
			slots: {
				get: function(){
					return 'b' + this.super();
				}
			}
		};
		var C = {
			name: 'c',
			get: function(){
				return 'c' + this.super();
			},
			slots: {
				get: function(){
					return 'c' + this.super();
				}
			}
		};
		
		var foo = new (Compo(A, B, C, {
			get: function(){
				return 'd' + this.super();
			}
		}));
		
		eq_(foo.name, 'c');
		eq_(foo.get(), 'dcba');
		eq_(foo.slots.get(), 'cba');
		eq_(foo.slots.foo(), 'dcba');
	},
	'should inherit component attributes and methods': function(){
		var A = Compo({
			foo: function(){
				return 'foo'
			},
			attr: {
				a: '~[name]'
			}
		});
		var B = Compo(A, {
			foo: function(){
				return 'foo' + this.super()
			},
			attr: {
				b: '~[name]'
			}
		});
		
		var b = new B;
		
		is_(b.foo, 'Function');
		eq_(b.foo(), 'foofoo');
		is_(b.attr.b, 'Function');
		is_(b.attr.a, 'Function');
	},
	'should inherit component constructors': function(){
		var A = Compo({
			name: '_',
			constructor: function(x){
				this.name += x + 'A';
			}
		});
		var B = function(x){
			this.name += x + 'B';
		};
		var C = Compo(A, B, {
			constructor: function(x){
				this.name += x + 'C';
			}
		});
		
		var c = new C('-');
		eq_(c.name, '_-A-B-C');
	}
})